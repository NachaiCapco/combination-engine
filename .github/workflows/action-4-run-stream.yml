name: "Action 4: Run Tests (SSE Stream)"

on:
  workflow_dispatch:
    inputs:
      testName:
        description: 'Test suite name to execute (must match Action 3 compilation)'
        required: true
        default: 'tc002'
        type: string
      compileRunId:
        description: 'Action 3 run ID to download compiled tests from (required)'
        required: true
        type: string

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14.0'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download compiled tests from Action 3
        run: |
          echo "=========================================="
          echo "üì• Downloading compiled tests from Action 3"
          echo "=========================================="
          echo "Run ID: ${{ inputs.compileRunId }}"
          echo "Test Suite: ${{ inputs.testName }}"
          echo ""

          # Download artifact using GitHub CLI
          gh run download ${{ inputs.compileRunId }} \
            --name "compiled-tests-${{ inputs.testName }}" \
            --dir workspace_download || {
              echo "‚ùå Failed to download artifact 'compiled-tests-${{ inputs.testName }}'"
              echo ""
              echo "Please check:"
              echo "1. The run ID is correct: ${{ inputs.compileRunId }}"
              echo "2. Action 3 completed successfully for test suite '${{ inputs.testName }}'"
              echo "3. The artifact hasn't expired (30 day retention)"
              echo ""
              echo "To find the run ID:"
              echo "  1. Go to Actions ‚Üí Action 3: Compile Test Cases"
              echo "  2. Click on the successful run"
              echo "  3. Copy the run ID from the URL (the number at the end)"
              exit 1
            }

          # Move downloaded files to workspace
          # The artifact structure is: workspace_download/workspace/testName/ or workspace_download/testName/
          if [ -d "workspace_download/workspace/${{ inputs.testName }}" ]; then
            # Structure: workspace_download/workspace/testName/
            mv workspace_download/workspace workspace
            echo "‚úÖ Compiled tests downloaded successfully!"
          elif [ -d "workspace_download/${{ inputs.testName }}" ]; then
            # Structure: workspace_download/testName/
            mkdir -p workspace
            mv workspace_download/${{ inputs.testName }} workspace/
            echo "‚úÖ Compiled tests downloaded successfully!"
          else
            echo "‚ùå Error: Downloaded artifact has unexpected structure"
            echo "Expected either:"
            echo "  - workspace_download/workspace/${{ inputs.testName }}/"
            echo "  - workspace_download/${{ inputs.testName }}/"
            echo ""
            echo "Actual contents:"
            ls -R workspace_download/
            exit 1
          fi

          echo ""
          echo "Generated test cases:"
          ls -lh workspace/${{ inputs.testName }}/generated/ | head -15
          echo ""
          TEST_COUNT=$(ls -1 workspace/${{ inputs.testName }}/generated/*.robot 2>/dev/null | wc -l | tr -d ' ')
          echo "Total: $TEST_COUNT test case(s)"
          echo "=========================================="
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Verify test suite ready
        run: |
          echo "=========================================="
          echo "‚úÖ Test suite ready: ${{ inputs.testName }}"
          echo "=========================================="
          echo ""
          echo "Stream URL will be: http://localhost:3000/api/v1/run-test-case/${{ inputs.testName }}/stream"
          echo "=========================================="

      - name: Start FastAPI server
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 3000 > server.log 2>&1 &
          echo $! > server.pid
          sleep 10

      - name: Wait for server to be ready
        run: |
          timeout 30 bash -c 'until curl -s http://localhost:3000/health > /dev/null; do sleep 1; done' || {
            echo "Server failed to start. Logs:"
            cat server.log
            exit 1
          }
          echo "Server is ready!"

      - name: Run tests with SSE streaming
        run: |
          echo "=========================================="
          echo "üöÄ Starting Test Execution"
          echo "=========================================="
          echo "Test Suite: ${{ inputs.testName }}"
          echo "Connecting to SSE stream..."
          echo "=========================================="
          echo ""

          # Use curl to consume SSE stream and display in real-time
          timeout 600 curl -N http://localhost:3000/api/v1/run-test-case/${{ inputs.testName }}/stream \
            2>&1 | tee sse_output.log | while IFS= read -r line; do
              # Highlight important events
              if echo "$line" | grep -q "event: start"; then
                echo "‚ñ∂Ô∏è  $line"
              elif echo "$line" | grep -q "event: progress"; then
                echo "‚è≥ $line"
              elif echo "$line" | grep -q "event: done"; then
                echo "‚úÖ $line"
              elif echo "$line" | grep -q "event: error"; then
                echo "‚ùå $line"
              else
                echo "$line"
              fi
            done || {
              EXIT_CODE=$?
              if [ $EXIT_CODE -eq 124 ]; then
                echo ""
                echo "‚è∞ Test execution timeout (10 minutes)"
              else
                echo ""
                echo "‚ùå Test execution failed with code: $EXIT_CODE"
              fi
              cat server.log
              exit 1
            }

          echo ""
          echo "=========================================="
          echo "‚úÖ Test Execution Complete"
          echo "=========================================="

      - name: Parse test results
        run: |
          echo "=========================================="
          echo "üìä Extracting Test Summary"
          echo "=========================================="

          # Extract the final "done" event from SSE output
          if grep -q 'event: done' sse_output.log; then
            echo ""
            echo "‚úÖ Test execution completed successfully!"
            echo ""
            grep -A 10 'event: done' sse_output.log | tail -n 10

            # Try to extract JSON data from the done event
            DONE_DATA=$(grep -A 10 'event: done' sse_output.log | grep '^data:' | sed 's/^data: //')

            if [ ! -z "$DONE_DATA" ]; then
              echo ""
              echo "Test Results JSON:"
              echo "$DONE_DATA" | python -m json.tool 2>/dev/null || echo "$DONE_DATA"

              # Add to GitHub Actions Summary
              echo "## üìä Test Execution Results" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Test Suite:** \`${{ inputs.testName }}\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Summary Data" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              echo "$DONE_DATA" | python -m json.tool 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "$DONE_DATA" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è  No 'done' event found in output"
            echo "This might indicate the test execution did not complete properly"
          fi

          echo "=========================================="

      - name: Verify reports generated
        run: |
          echo "=========================================="
          echo "üìÅ Checking Generated Reports"
          echo "=========================================="

          REPORT_DIR=$(ls -dt workspace/${{ inputs.testName }}/Report/*/ 2>/dev/null | head -n 1)
          if [ -z "$REPORT_DIR" ]; then
            echo "‚ùå Error: No report directory found!"
            exit 1
          fi

          echo "‚úÖ Latest report directory: $REPORT_DIR"
          echo ""
          echo "Report contents:"
          ls -lh "$REPORT_DIR"
          echo ""

          # Verify key report files exist
          echo "Verifying key report files:"
          MISSING_FILES=0
          for file in output.xml report.html log.html; do
            if [ -f "${REPORT_DIR}${file}" ]; then
              echo "  ‚úÖ Found: $file"
            else
              echo "  ‚ùå Missing: $file"
              MISSING_FILES=$((MISSING_FILES + 1))
            fi
          done

          echo ""
          echo "=========================================="

          # Add report info to Summary
          echo "## üìÅ Generated Reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Report Directory:** \`${REPORT_DIR}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available Files:**" >> $GITHUB_STEP_SUMMARY
          for file in output.xml report.html log.html; do
            if [ -f "${REPORT_DIR}${file}" ]; then
              echo "- ‚úÖ \`$file\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ‚ùå \`$file\` (missing)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ Download full reports from the artifacts section below." >> $GITHUB_STEP_SUMMARY

          if [ $MISSING_FILES -gt 0 ]; then
            echo "‚ö†Ô∏è  Warning: $MISSING_FILES file(s) missing"
          fi

      - name: Display server logs
        if: always()
        run: |
          echo "=== Server Logs ==="
          cat server.log || true

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-stream-output-${{ inputs.testName }}
          path: |
            workspace/${{ inputs.testName }}/Report/
            sse_output.log
          retention-days: 14

      - name: Upload server logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-server-logs
          path: server.log
          retention-days: 7

      - name: Display summary
        if: always()
        run: |
          echo ""
          echo "=========================================="
          echo "üéØ Test Execution Summary"
          echo "=========================================="
          echo "Test Suite: ${{ inputs.testName }}"
          echo "Artifact Name: test-stream-output-${{ inputs.testName }}"
          echo ""
          echo "‚úÖ Test execution workflow completed!"
          echo "üì¶ Check artifacts below for detailed reports"
          echo "üìä View the Summary tab for quick results"
          echo "=========================================="

          # Final summary to GitHub Actions Summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Reports:** \`test-stream-output-${{ inputs.testName }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Server Logs:** \`run-server-logs\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> üí° Download artifacts from the artifacts section at the top of this page." >> $GITHUB_STEP_SUMMARY
