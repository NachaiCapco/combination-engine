name: "Action 5: Download Test Report"

on:
  workflow_dispatch:
    inputs:
      testName:
        description: 'Test suite name'
        required: true
        default: 'github-action-test'
        type: string
      timestamp:
        description: 'Report timestamp (YYYY-MM-DD_HH-MM-SS) or leave empty for latest'
        required: false
        default: ''
        type: string

jobs:
  download-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14.0'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify test suite exists
        run: |
          if [ ! -d "workspace/${{ inputs.testName }}" ]; then
            echo "Error: Test suite '${{ inputs.testName }}' not found!"
            echo ""
            echo "Available test suites:"
            ls -d workspace/*/ 2>/dev/null || echo "  No test suites found"
            exit 1
          fi
          echo "Test suite found: ${{ inputs.testName }}"

      - name: Verify reports exist
        run: |
          if [ ! -d "workspace/${{ inputs.testName }}/Report" ]; then
            echo "Error: No reports found for test suite '${{ inputs.testName }}'!"
            echo "Please run Action 4 (Run Tests) first."
            exit 1
          fi

          echo "Available reports:"
          ls -lt workspace/${{ inputs.testName }}/Report/

      - name: Validate timestamp format (if provided)
        if: inputs.timestamp != ''
        run: |
          if ! echo "${{ inputs.timestamp }}" | grep -qE '^\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2}$'; then
            echo "Error: Invalid timestamp format!"
            echo "Expected format: YYYY-MM-DD_HH-MM-SS"
            echo "Example: 2025-10-30_14-30-22"
            echo "Provided: ${{ inputs.timestamp }}"
            exit 1
          fi
          echo "Timestamp format is valid: ${{ inputs.timestamp }}"

      - name: Start FastAPI server
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 3000 > server.log 2>&1 &
          echo $! > server.pid
          sleep 10

      - name: Wait for server to be ready
        run: |
          timeout 30 bash -c 'until curl -s http://localhost:3000/health > /dev/null; do sleep 1; done' || {
            echo "Server failed to start. Logs:"
            cat server.log
            exit 1
          }
          echo "Server is ready!"

      - name: Download report (specific timestamp)
        if: inputs.timestamp != ''
        run: |
          echo "Downloading report for timestamp: ${{ inputs.timestamp }}"
          curl -OJ http://localhost:3000/api/v1/download/${{ inputs.testName }}/${{ inputs.timestamp }} \
            -w "\nHTTP Status: %{http_code}\n" \
            --fail-with-body || {
              echo "Failed to download report"
              cat server.log
              exit 1
            }

          echo "Report downloaded successfully!"
          ls -lh *Report*.zip

      - name: Download report (latest)
        if: inputs.timestamp == ''
        run: |
          echo "Downloading latest report..."
          curl -OJ http://localhost:3000/api/v1/download/${{ inputs.testName }} \
            -w "\nHTTP Status: %{http_code}\n" \
            --fail-with-body || {
              echo "Failed to download report"
              cat server.log
              exit 1
            }

          echo "Report downloaded successfully!"
          ls -lh *Report*.zip

      - name: Extract and verify ZIP contents
        run: |
          ZIP_FILE=$(ls *Report*.zip | head -n 1)
          echo "=== ZIP Contents ==="
          unzip -l "$ZIP_FILE"

          echo ""
          echo "=== Extracting ZIP ==="
          mkdir -p extracted_report
          unzip -q "$ZIP_FILE" -d extracted_report
          echo "Extracted files:"
          ls -lh extracted_report/

      - name: Display server logs
        if: always()
        run: |
          echo "=== Server Logs ==="
          cat server.log || true

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

      - name: Upload report ZIP
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ inputs.testName }}
          path: |
            *Report*.zip
            extracted_report/
          retention-days: 30

      - name: Upload server logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: download-server-logs
          path: server.log
          retention-days: 7

      - name: Display summary
        if: always()
        run: |
          echo ""
          echo "========================================="
          echo "Report Download Summary"
          echo "========================================="
          echo "Test Suite: ${{ inputs.testName }}"
          if [ -n "${{ inputs.timestamp }}" ]; then
            echo "Timestamp: ${{ inputs.timestamp }}"
          else
            echo "Timestamp: Latest"
          fi
          echo "Report available in artifacts: test-report-${{ inputs.testName }}"
          echo "========================================="
