name: "Action 2D: Generate Combinations (from URL)"

on:
  workflow_dispatch:
    inputs:
      fileUrl:
        description: 'Public URL to XLSX/CSV file (e.g., S3 presigned URL, Google Drive, Dropbox)'
        required: true
        type: string
      testId:
        description: 'Test identifier for artifact naming'
        required: false
        default: 'url-upload'
        type: string

jobs:
  generate-combinations:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download file from URL
        run: |
          echo "Downloading file from: ${{ inputs.fileUrl }}"

          # Download file (supports redirects)
          curl -L "${{ inputs.fileUrl }}" -o uploaded_file.xlsx --fail

          # Verify file downloaded
          if [ ! -f uploaded_file.xlsx ]; then
            echo "Error: Failed to download file"
            exit 1
          fi

          # Check file size
          FILE_SIZE=$(stat -f%z uploaded_file.xlsx 2>/dev/null || stat -c%s uploaded_file.xlsx)
          echo "Downloaded file size: $(($FILE_SIZE / 1024))KB"

          # Verify file type (basic check)
          file uploaded_file.xlsx

      - name: Set up Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14.0'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start FastAPI server
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 3000 > server.log 2>&1 &
          echo $! > server.pid
          sleep 10

      - name: Wait for server to be ready
        run: |
          timeout 30 bash -c 'until curl -s http://localhost:3000/health > /dev/null; do sleep 1; done' || {
            echo "Server failed to start. Logs:"
            cat server.log
            exit 1
          }
          echo "Server is ready!"

      - name: Generate test combinations
        run: |
          echo "Uploading file to generate combinations..."
          curl -X POST http://localhost:3000/api/v1/combination-test-case \
            -F "file=@uploaded_file.xlsx" \
            -o combination_testcases.xlsx \
            -w "\nHTTP Status: %{http_code}\n" \
            --fail-with-body || {
              echo "Failed to generate combinations"
              cat server.log
              exit 1
            }

          echo "Combination file generated successfully!"
          ls -lh combination_testcases.xlsx

      - name: Display server logs
        if: always()
        run: |
          echo "=== Server Logs ==="
          cat server.log || true

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

      - name: Upload combination file
        uses: actions/upload-artifact@v4
        with:
          name: test-combinations-${{ inputs.testId }}
          path: combination_testcases.xlsx
          retention-days: 14

      - name: Display summary
        run: |
          echo ""
          echo "========================================="
          echo "Test Combinations Generated"
          echo "========================================="
          echo "Test ID: ${{ inputs.testId }}"
          echo "Source URL: ${{ inputs.fileUrl }}"
          echo "Artifact: test-combinations-${{ inputs.testId }}"
          echo "========================================="
