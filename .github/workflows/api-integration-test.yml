name: "TestForge API Integration Test"

on:
  workflow_dispatch:
    inputs:
      testName:
        description: 'Test suite name'
        required: false
        default: 'github-action-test'
        type: string
      inputFile:
        description: 'Path to input XLSX file (e.g., data/input.xlsx) or leave empty to use example'
        required: false
        default: ''
        type: string
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'requirements.txt'
  pull_request:
    branches:
      - main

jobs:
  integration-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.14
        uses: actions/setup-python@v5
        with:
          python-version: '3.14.0'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start FastAPI server
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 3000 > server.log 2>&1 &
          echo $! > server.pid
          sleep 10

      - name: Wait for server to be ready
        run: |
          timeout 30 bash -c 'until curl -s http://localhost:3000/health > /dev/null; do sleep 1; done' || {
            echo "Server failed to start. Logs:"
            cat server.log
            exit 1
          }
          echo "Server is ready!"

      # Step 1: Download example template (if no input file provided)
      - name: Step 1 - Download example template
        if: inputs.inputFile == ''
        run: |
          echo "=== Step 1: Download Example Template ==="
          curl -OJ http://localhost:3000/api/v1/download/example-combination-data
          ls -lh example-combination-data.xlsx

          # Use example as input for next step
          cp example-combination-data.xlsx input_file.xlsx

      # Step 1b: Use provided input file
      - name: Step 1b - Use provided input file
        if: inputs.inputFile != ''
        run: |
          echo "=== Step 1: Using Provided Input File ==="
          if [ ! -f "${{ inputs.inputFile }}" ]; then
            echo "Error: Input file '${{ inputs.inputFile }}' not found!"
            exit 1
          fi
          cp "${{ inputs.inputFile }}" input_file.xlsx
          ls -lh input_file.xlsx

      # Step 2: Generate test combinations
      - name: Step 2 - Generate test combinations
        run: |
          echo "=== Step 2: Generate Test Combinations ==="
          curl -X POST http://localhost:3000/api/v1/combination-test-case \
            -F "file=@input_file.xlsx" \
            -o combination_testcases.xlsx \
            -w "\nHTTP Status: %{http_code}\n" \
            --fail-with-body || {
              echo "Failed to generate combinations"
              cat server.log
              exit 1
            }

          echo "Combination file generated!"
          ls -lh combination_testcases.xlsx

      # Step 2b: Fill in expected results (mock - in real scenario, user fills manually)
      - name: Step 2b - Fill expected results (automated for testing)
        run: |
          echo "=== Step 2b: Adding [Response] Columns ==="
          # In production, user would download, fill manually, and commit
          # For automation, we'll use the combination file as-is for now
          cp combination_testcases.xlsx filled_testcases.xlsx
          echo "Using combination file as filled file (mock step)"

      # Step 3: Compile test cases
      - name: Step 3 - Compile test cases
        run: |
          echo "=== Step 3: Compile Test Cases ==="
          curl -X POST http://localhost:3000/api/v1/compile-test-case \
            -F "testName=${{ inputs.testName }}" \
            -F "file=@filled_testcases.xlsx" \
            -H "Accept: application/json" \
            -o compile_response.json \
            -w "\nHTTP Status: %{http_code}\n" \
            --fail-with-body || {
              echo "Failed to compile test cases"
              cat compile_response.json || true
              cat server.log
              exit 1
            }

          echo ""
          echo "=== Compilation Response ==="
          cat compile_response.json | python -m json.tool

          # Verify workspace created
          if [ -d "workspace/${{ inputs.testName }}/generated" ]; then
            echo ""
            echo "Generated test files:"
            ls -lh workspace/${{ inputs.testName }}/generated/
          fi

      # Step 4: Run tests with SSE streaming
      - name: Step 4 - Run tests with SSE streaming
        run: |
          echo "=== Step 4: Run Tests ==="
          timeout 600 curl -N http://localhost:3000/api/v1/run-test-case/${{ inputs.testName }}/stream \
            2>&1 | tee sse_output.log || {
              EXIT_CODE=$?
              if [ $EXIT_CODE -eq 124 ]; then
                echo "Test execution timeout (10 minutes)"
              else
                echo "Test execution failed with code: $EXIT_CODE"
              fi
              exit 1
            }

          echo ""
          echo "=== Test Execution Complete ==="

      # Step 5: Download test report
      - name: Step 5 - Download test report (latest)
        run: |
          echo "=== Step 5: Download Test Report ==="
          curl -OJ http://localhost:3000/api/v1/download/${{ inputs.testName }} \
            -w "\nHTTP Status: %{http_code}\n" \
            --fail-with-body || {
              echo "Failed to download report"
              cat server.log
              exit 1
            }

          echo "Report downloaded successfully!"
          ZIP_FILE=$(ls *Report*.zip | head -n 1)
          ls -lh "$ZIP_FILE"

          echo ""
          echo "=== ZIP Contents ==="
          unzip -l "$ZIP_FILE"

      # Verify all outputs
      - name: Verify integration test artifacts
        run: |
          echo "=== Verifying All Artifacts ==="

          echo "✓ Step 1: Example template or input file"
          ls -lh input_file.xlsx

          echo "✓ Step 2: Combination test cases"
          ls -lh combination_testcases.xlsx

          echo "✓ Step 3: Compiled test cases"
          ls -lh workspace/${{ inputs.testName }}/generated/*.robot | head -n 3

          echo "✓ Step 4: Test execution logs"
          ls -lh sse_output.log

          echo "✓ Step 5: Downloaded report"
          ls -lh *Report*.zip

          echo ""
          echo "========================================="
          echo "All integration test steps completed!"
          echo "========================================="

      - name: Display server logs
        if: always()
        run: |
          echo "=== Server Logs ==="
          cat server.log || true

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

      # Upload all artifacts
      - name: Upload all test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: testforge-reports-${{ inputs.testName }}
          path: |
            input_file.xlsx
            combination_testcases.xlsx
            filled_testcases.xlsx
            compile_response.json
            workspace/${{ inputs.testName }}/
            sse_output.log
            *Report*.zip
            server.log
          retention-days: 30

      - name: Display final summary
        if: always()
        run: |
          echo ""
          echo "========================================="
          echo "TestForge Integration Test Summary"
          echo "========================================="
          echo "Test Suite: ${{ inputs.testName }}"
          echo "Status: ${{ job.status }}"
          echo ""
          echo "Artifacts available:"
          echo "  • Example/Input template"
          echo "  • Generated combinations"
          echo "  • Compiled Robot Framework tests"
          echo "  • Test execution SSE output"
          echo "  • Test reports (HTML/XML)"
          echo ""
          echo "Download artifacts from the Actions tab"
          echo "========================================="
